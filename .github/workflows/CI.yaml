---

name: CI

on:
  schedule:
    # everyday at 1 AM on the first of every month
    - cron: '0 1 1 * *'
  pull_request:
  push:

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code (Lint)
        uses: actions/checkout@v2
      - name: Lint Code Base
        uses: github/super-linter@v3.17.0
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}

  test:
    name: Testing
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.info.outputs.tag }}
      repo: ${{ steps.info.outputs.repo }}
    steps:
      # Preparation
      - name: Checkout Code (Testing)
        uses: actions/checkout@v2
      - name: Set up QEMU  (Testing)
        uses: docker/setup-qemu-action@v1
      - name: Login to DockerHub (Testing)
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Test
      - name: Test help command
        uses: ./
        with:
          login: false
          json: false
          task: help
      # Info gathering
      - id: info
        run: |
          repo=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          if [ -n $GITHUB_SHA ]
          then
            tag=$GITHUB_SHA
          elif [ -n $GITHUB_HEAD_REF ]
          then
            tag=$(echo $GITHUB_HEAD_REF | cut -f 3- -d "/")
          else
            tag=schedule
          fi
          tag=$tag
          echo "::set-output name=repo::$repo"
          echo "::set-output name=tag::$tag"
      # Build
      - name: Build and Push image (Testing)
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: av91/jelastic-cli:latest

  build:
    name: Build and Public Docker image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      # Prepare
      - name: Checkout Code (Build)
        uses: actions/checkout@v2
      - name: Set up QEMU (Build)
        uses: docker/setup-qemu-action@v1
      - name: Login to ghcr.io (Build)
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Dry-run tag generation
        id: create_tag_test
        uses: anothrNick/github-tag-action@1.30.0
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          WITH_V: true
          DRY_RUN: true
      # Build and push
      - name: Build and Push image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: >
            ghcr.io/${{ needs.test.outputs.repo }}/jelastic-cli:${{ needs.test.outputs.tag }},
            ghcr.io/${{ needs.test.outputs.repo }}/jelastic-cli:${{ steps.create_tag_test.outputs.new_tag }},
            ghcr.io/${{ needs.test.outputs.repo }}/jelastic-cli:latest,
            av91/jelastic-cli:${{ needs.test.outputs.tag }},
            av91/jelastic-cli:${{ steps.create_tag_test.outputs.new_tag }},
            av91/jelastic-cli:latest
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: build
    steps:
      - name: Checkout Code (Release)
        uses: actions/checkout@v2
      - name: Changelog generation
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        id: changelog
        with:
          token: ${{ secrets.G_TOKEN }}
      - name: Bump version and push tag
        id: create_tag
        uses: anothrNick/github-tag-action@1.17.2
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          WITH_V: true
      - name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
